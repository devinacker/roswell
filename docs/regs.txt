Super UFO hardware registers
by Revenant

last updated 2018/03/25

The registers at $2184-218f are automatically enabled when turning on the SNES,
but are disabled when launching a game, and are not enabled again if the reset
button is pressed.

If the UFO registers are NOT enabled:
 - Reading any register returns open bus
 - Writing any register except $218a or $218b has no effect
 - CH376 chip is powered off / USB connection is terminated

All other values/effects mentioned below assume the registers are enabled.

The Super UFO uses the WinChipHead CH376 chip for USB communication and SD card
functionality. (See the PDF datasheets in this directory for details)

A point of interest:
On boot, the 9.x UFO firmware reads and writes $2180-83, $218d, and $218f as a
means of decoding the routines which handle $2184-89 (probably to deter
counterfeit/clone hardware). It's currently unknown how to read anything from
$218d or $218f other than open bus, and writing $218d has no known effects.
The equivalent routines are stored "in the clear" in the old 8.x firmware.



$2184 - memory control 1 (UFO SRAM mapping, SRAM size, DRAM size)
=================================================================
Controls which region of a given bank the UFO SRAM is mapped to, and
how much of it is exposed.
Also controls the actual mapping of DRAM addresses to SNES addresses.
(See also $2186)
Read from the bytes at $0012 and $0015 in the UFO header.

W: bit 6 (#$40) = SNES A22 -> UFO DRAM A18
     0: DRAM size is <= 16Mbit (mirrored in banks $40-7d and $c0-ff)
     1: DRAM size is >  16Mbit (not mirrored)
   bits 4-5 = UFO SRAM mapping (A15:12)
     0: ??? ($6000 in LoROM banks?)
     1: $0000-ffff
     2: $0000-7fff
     3: $8000-ffff
   bits 0-2 = UFO SRAM size
     0:     none (open bus)
     1/4/5: $800 bytes (or $1000?)
     2/6:   $2000 bytes
     3:     $8000 bytes
     7:     $20000 bytes (split over multiple banks)

$2185 - memory control 2 (UFO SRAM mapping)
===========================================
Controls which banks the UFO SRAM is mapped to.
Each byte contains 2-bit logic states for 4 address lines, starting with A23
as the top two bits of $2185. 
Read from the byte at $0016 in the UFO header.
(Warning: be careful to avoid bus conflicts if cartridge is enabled)

W: bits 6-7 = UFO SRAM mapping (A23)
   bits 4-5 = UFO SRAM mapping (A22)
   bits 2-3 = UFO SRAM mapping (A21)
   bits 0-1 = UFO SRAM mapping (A20)
     0/1: don't care
     2:   0
     3:   1

$2186 - memory control 3 (DRAM size)
====================================
Controls the actual mapping of DRAM addresses to SNES addresses.
(See also bit 6 of $2184)
Read from the byte at $0013 in the UFO header.

W: bit 6 (#$40) = SNES A21 -> UFO DRAM A17
     0: DRAM size is <= 8Mbit (mirrored in banks $20-3f, $60-7d, ...)
     1: DRAM size is >  8Mbit
   bit 4 (#$10) = SNES A20 -> UFO DRAM A16
     0: DRAM size is <= 4Mbit (mirrored in banks $10-1f, $30-3f, ...)
     1: DRAM size is >  4Mbit

$2187 - memory control 4 (DRAM mapping)
=======================================
Controls which banks the UFO DRAM is mapped to.
Works basically the same way as $2185.
Read from the byte at $0014 in the UFO header.

W: bits 6-7 = UFO DRAM mapping (A23)
   bits 4-5 = UFO DRAM mapping (A22)
   bits 2-3 = UFO DRAM mapping (A21)
   bits 0-1 = UFO DRAM mapping (A20)
     0/1: don't care
     2:   0
     3:   1

$2188 - hardware status
=======================
if $218f & #$80:
R: bits 0-3 = constant #$5 (hardware revision?)
   bits 4-7 = open bus

otherwise:
R: bit 0 (#$01) = no SD card ($00b1 <- #$ff)
   bit 1 (#$02) = ? (SD card related) ($00b2 <- #$ff)
   bit 2 (#$04) = USB cable connected ($00b0 <- #$00)
   bit 3 (#$08) = ?
   bits 4-7 = open bus

$2189 - game select
===================
Selects what is mapped at banks that aren't mapped to the UFO firmware.
Note that if the cartridge is enabled, writes to those addresses will
still also go to DRAM (if it's write-enabled by $218a).

SRAM and DRAM mapping are determined by $2184-87.
Anything that isn't mapped to either of them will be mapped to the cartridge
if it's enabled, or open bus otherwise.

W: bits 0-1 = 
     0:   enable DRAM, SRAM, and cartridge
     1/2: enable SRAM only
     3:   enable cartridge only

$218a - firmware enable
=======================
if mapper enabled ($218b):
W: #$x0  = UFO  at banks $00-7d
           Game at banks $80-ff (DRAM writable)
           Enable other registers
           (default power-on state)
           
   #$xA  = UFO  at banks $00-7d
           Game at banks $80-ff (DRAM writable?)
           Disable other registers
           (set by firmware updater while reflashing)
           
   other = Game at banks $00-7d and $80-ff
           Disable other registers
           (set when booting into DRAM or cartridge)

$218b - mapper enable
=====================
W: #$xA = enable writes to $218a

$218c - CH376 data port
=======================
R/W: input to or output from USB/SD card commands
     (see datasheets for details)
     
$218d - ???
===========
R/W: unknown (antipiracy)

$218e - CH376 command port
==========================
R: bit 7 (#$80) = interrupt flag
   bits 6-0 = same as data port bits 6-0
W: USB/SD card command (see datasheets for details)

$218f - hardware status control
===============================
R: unknown (antipiracy)
W: bit 7 (#$80) =
     0: get CH376 status in $2188
     1: get hardware revision (or something) in $2188
   bits 0-6 = unknown (antipiracy)
